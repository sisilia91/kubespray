---
## Global Offline settings
is_this_offline: false
### Private Container Image Registry
#registry_host: "10.0.10.50:5000"
#files_repo: "file:///tmp/files-repo"
### If using CentOS, RedHat, AlmaLinux or Fedora
# yum_repo: "file:///tmp/packages-repo"
### If using Debian
# debian_repo: "http://myinternaldebianrepo"
### If using Ubuntu
# ubuntu_repo: "http://myinternalubunturepo"

## Container Registry overrides
#kube_image_repo: "{{ registry_host }}/k8s.gcr.io"
#etcd_image_repo: "{{ registry_host }}/k8s.gcr.io"
#gcr_image_repo: "{{ registry_host }}/gcr.io"
#docker_image_repo: "{{ registry_host }}/docker.io"
#quay_image_repo: "{{ registry_host }}/quay.io"
#mcr_image_repo: "{{ registry_host }}/mcr.microsoft.com"
#nvcr_image_repo: "{{ registry_host }}/nvcr.io"
#elastic_image_repo: "{{ registry_host }}/docker.elastic.co"
#us_gcr_image_repo: "{{ registry_host }}/us.gcr.io"
#grafana_image_repo: "{{ registry_host }}/grafana/grafana"
#efk_fluentd_image_repo: "{{ registry_host }}/fluent"
#mysql_image_repo: "{{ registry_host }}/mysql"
#efk_busybox_image_repo: "{{ registry_host }}/busybox"

## Kubernetes components
#kubeadm_download_url: "{{ files_repo }}/kubeadm"
#kubectl_download_url: "{{ files_repo }}/kubectl"
#kubelet_download_url: "{{ files_repo }}/kubelet"

## CNI Plugins
#cni_download_url: "{{ files_repo }}/cni-plugins-linux-amd64-v0.9.1.tgz"

## cri-tools
#crictl_download_url: "{{ files_repo }}/crictl-v1.19.0-linux-amd64.tar.gz"

## [Optional] etcd: only if you **DON'T** use etcd_deployment=host
#etcd_download_url: "{{ files_repo }}/etcd-v3.4.13-linux-amd64.tar.gz"

# [Optional] Calico: If using Calico network plugin
#calicoctl_download_url: "{{ files_repo }}/calicoctl-linux-amd64"

# [Optional] Calico with kdd: If using Calico network plugin with kdd datastore
#calico_crds_download_url: "{{ files_repo }}/calico-3.17.4.tar.gz"

## hyperregistry
#hyperregistry_download_url: "{{ files_repo }}/hyperregistry-v2.2.2.tgz"

# [Optional] helm: only if you set helm_enabled: true
#helm_download_url: "{{ files_repo }}/helm-v3.5.4-linux-amd64.tar.gz"

# [Optional] helm: only if you set helm_enabled: true
# helm_download_url: "{{ files_repo }}/helm-{{ helm_version }}-linux-{{ image_arch }}.tar.gz"

# [Optional] crun: only if you set crun_enabled: true
# crun_download_url: "{{ files_repo }}/containers/crun/releases/download/{{ crun_version }}/crun-{{ crun_version }}-linux-{{ image_arch }}"

# [Optional] kata: only if you set kata_containers_enabled: true
# kata_containers_download_url: "{{ files_repo }}/kata-containers/runtime/releases/download/{{ kata_containers_version }}/kata-static-{{ kata_containers_version }}-{{ ansible_architecture }}.tar.xz"

## CentOS/Redhat/AlmaLinux
### For EL7, base and extras repo must be available, for EL8, baseos and appstream
### By default we enable those repo automatically
# rhel_enable_repos: false
### Docker / Containerd
# docker_rh_repo_base_url: "{{ yum_repo }}/docker-ce/$releasever/$basearch"
# docker_rh_repo_gpgkey: "{{ yum_repo }}/docker-ce/gpg"

## Fedora
### Docker
# docker_fedora_repo_base_url: "{{ yum_repo }}/docker-ce/{{ ansible_distribution_major_version }}/{{ ansible_architecture }}"
# docker_fedora_repo_gpgkey: "{{ yum_repo }}/docker-ce/gpg"
### Containerd
# containerd_fedora_repo_base_url: "{{ yum_repo }}/containerd"
# containerd_fedora_repo_gpgkey: "{{ yum_repo }}/docker-ce/gpg"

## Debian
### Docker
# docker_debian_repo_base_url: "{{ debian_repo }}/docker-ce"
# docker_debian_repo_gpgkey: "{{ debian_repo }}/docker-ce/gpg"
### Containerd
# containerd_debian_repo_base_url: "{{ ubuntu_repo }}/containerd"
# containerd_debian_repo_gpgkey: "{{ ubuntu_repo }}/containerd/gpg"
# containerd_debian_repo_repokey: 'YOURREPOKEY'

## Ubuntu
### Docker
# docker_ubuntu_repo_base_url: "{{ ubuntu_repo }}/docker-ce"
# docker_ubuntu_repo_gpgkey: "{{ ubuntu_repo }}/docker-ce/gpg"
### Containerd
# containerd_ubuntu_repo_base_url: "{{ ubuntu_repo }}/containerd"
# containerd_ubuntu_repo_gpgkey: "{{ ubuntu_repo }}/containerd/gpg"
# containerd_ubuntu_repo_repokey: 'YOURREPOKEY'
